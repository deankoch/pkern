% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkern_snap.R
\name{pkern_snap_1d}
\alias{pkern_snap_1d}
\title{Snap an irregular set of 1d points to nearest regular subgrid}
\usage{
pkern_snap_1d(g, pts, sep = 1, distinct = TRUE)
}
\arguments{
\item{g}{vector of grid line locations in ascending order}

\item{pts}{vector of point locations in 1D}

\item{sep}{integer, where \code{sep-1} is the number of grid lines between subgrid lines}

\item{distinct}{logical, indicating to attempt a 1-to-1 mapping}
}
\value{
list with elements "g", "map", and "dist" (see below)
}
\description{
This function finds a regular subgrid of the regular 1d grid \code{g} that is nearest
to the (noisy) point locations in \code{pts}, where the subgrid spacing \code{sep} specifies
that every \code{sep}th grid point in \code{g} belongs to the subgrid.
}
\details{
The function returns a list containing:
\code{g} vector of grid line coordinates
\code{map} output mapping vector, of same length as \code{pts} but with values in \code{seq(g)}
\code{dist} vector of squared snapping distances (corresponding to \code{pts})

The output mapping (\code{map}) is selected by least total cost (sum over all input points),
where the cost of a point is equal to the squared distance between the point and its
snapped (on-grid) location.

To align the subgrid, the function calculates the cost of each possible offset and
selects the least cost option. eg. if \code{sep=2}, the least coordinate in the subgrid
can be set to \code{g[1]} (offset 0) or \code{g[2]} (offset 1). In general there are \code{sep}
possible offsets, which are all tested in a loop.

When \code{distinct==TRUE}, the function calls an implementation of the Hungarian algorithm
(from R package \code{RcppHungarian}) to find an optimal assignment. Note that this can be
slow for large grids or large numbers of points.
}
\examples{
# define a grid and subgrid (every third grid line)
sep = 3
ng = 1e2
g = seq(ng)
sg = seq(sample(sep, 1), ng, by=sep)

# sample part of the subgrid and add noise
npts = round( (3/4) * length(sg) )
pts = sort(sample(sg, npts)) + stats::rnorm(npts)
pkern_snap_plot(g, pts)

# snap to subgrid and plot result
snap = pkern_snap_1d(sg, pts, sep, distinct=FALSE)
pkern_snap_plot(snap, pts)

# snap to outer grid and plot result
snap = pkern_snap_1d(g, pts, sep, distinct=FALSE)
pkern_snap_plot(snap, pts)

# repeat but avoid duplicate mappings (default `distinct=TRUE`)
snap = pkern_snap_1d(g, pts, sep)
pkern_snap_plot(snap, pts)

}
