% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkern_analysis.R
\name{pkern_detect_grid}
\alias{pkern_detect_grid}
\title{Ad-hoc method for snapping a set of points to the nearest grid}
\usage{
pkern_detect_grid(coords, nmax = NA, dmin = NA, nstart = 25, cw = 1)
}
\arguments{
\item{coords}{n X 2 matrix of "x" and "y" coordinates or sf object}

\item{nmax}{length-2 integer vector, the maximum allowable number of x and y grid lines}

\item{dmin}{length-2 numeric vector, minimum x and y distances allowed between grid lines}

\item{nstart}{length-2 integer vector, passed to stats::kmeans}

\item{cw}{length-2 numeric vector, complexity weights for x and y, passed to pkern_kmeans}
}
\value{
named list of three elements "dims", "gxy", and "snap" (see details)
}
\description{
This function finds a (possibly irregular) grid that most closely matches the matrix of
n points in \code{coords}. These points may form an incomplete subset of the grid. \code{coords}
should either be supported by \code{sf::st_coordinates}, or else coercible to a matrix with
column names 'x' (or 'X'), and 'y' (or 'Y'). Matrices with unnamed columns are assumed
to have x coordinates in the first column and y coordinates in the second.
}
\details{
The algorithm works by using kmeans to identify candidate x and y grid lines, and
ranking them by a cost function that incorporates squared distances and a complexity
term. This is computed independently along each dimension, for a range of k. See
\code{?pkern_kmeans} for details on this process, and the tuning parameters \code{nmax}, \code{dmin},
\code{nstart}, and \code{cw}. If a single number is supplied to any of these parameters, it is
duplicated for the x and y component analysis.

The return list contains: the detected dimensions ("dims"), the x and y grid line
positions ("gxy"), and a dataframe containing the original and snapped coordinates
("x", "xnew", "y", 'ynew") in column-vectorized order, along with their row and column
numbers ("i", "j"), the snapping distance ("dist"), and an indexing to recover the
original order of input coordinates ("input").
}
\examples{
nx = 35
ny = 24
coords = expand.grid(seq(nx), seq(ny)) + rnorm(nx*ny, 0, 1/5)
test.grid = pkern_detect_grid(coords)
plot(coords)
abline(v = test.grid$gxy$x)
abline(h = test.grid$gxy$y)
}
