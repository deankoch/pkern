% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkern_snap.R
\name{pkern_est_offset}
\alias{pkern_est_offset}
\title{Estimate the least-distance offset for 1D regular grid with respect to a set of points}
\usage{
pkern_est_offset(g, pts, sep, max_iter = 10L, n_per_iter = 100L)
}
\arguments{
\item{g}{numeric vector of grid point positions}

\item{pts}{numeric vector of point positions}

\item{sep}{integer specifying the spacing of grid lines}

\item{max_iter}{positive integer > 1, the maximum number of iterations}

\item{n_per_iter}{positive integer > 1, the maximum number of iterations}
}
\value{
positive integer, the offset index (an element of \code{seq(sep)})
}
\description{
For a set of (possibly irregularly positioned) 1d points \code{pts} and a regular grid \code{g},
the function attempts to find the integer-valued offset \code{off} (an element of \code{seq(sep)})
that minimizes the snapping distance (sum) from \code{pts} to the subgrid of \code{g} with spacing
\code{sep}. The resulting subgrid points are located at \code{g[seq(off, length(g), by=sep)]}
}
\details{
Note that \code{sep-1} specifies the number of grid lines (in \code{g}) skipped between adjacent
subgrid lines, ie it is an index, not a distance (which depends on the resolution of \code{g}).
Similarly, the output \code{off} is an offset index. However, in the algorithm, \code{off} is
treated like a continuous quantity lying in \code{c(1, sep)} for the purpose of sampling
test values, as described next:

The algorithm is a simple iterative parameter sweep. In each iteration, the parameter space
(initialized to \code{c(1, sep)}) is sampled at \code{n_per_iter} uniformly spaced values, say off_i,
for i = 1, ..., \code{n_per_iter}, rounded to the nearest integer, and with duplicates omitted.
The best (least distance) option, off_j, is identified and a new reduced parameter space is
defined around it with bounds (off_{j-2}, off_{j+2}). The process is repeated until a
maximum \code{max_iter} iterations is reached, or until the set of test offsets (off_i) ceases
to change
}
\examples{
g = 1:100
off_test = 6
sep = 7
pts = seq(off_test, max(g), by=sep)
pkern_est_offset(g, pts, sep)

# noisy example
pts_noisy = pts + rnorm(length(pts))
pkern_est_offset(g, pts_noisy, sep)
}
