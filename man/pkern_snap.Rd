% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkern_snap.R
\name{pkern_snap}
\alias{pkern_snap}
\title{Snap an irregular set of 2d points to nearest regular subgrid}
\usage{
pkern_snap(g, pts, sep = NULL, distinct = TRUE, quiet = FALSE, bias = 0)
}
\arguments{
\item{g}{list of two vectors ("x" and "y"), the grid line coordinates (ascending order)}

\item{pts}{list of two vectors ("x" and "y"), the 2d point coordinates (any order)}

\item{sep}{integer vector, where \code{sep-1} is the number of grid lines between subgrid lines}

\item{distinct}{logical, indicating to attempt a 1-to-1 mapping}

\item{quiet}{logical indicating to suppress console messages}

\item{bias}{nonegative numeric passed to \code{pkern_estimate_sep} (when \code{sep} not supplied)}
}
\value{
a list (see details)
}
\description{
Snaps points to a subgrid, either by calling \code{pkern_snap_1d} twice, or by using the
hungarian algorithm on the 2d problem
}
\details{
output list contains:
\code{gdim}, the input grid dimensions (ny, nx)
\code{sep}, the estimated spacing (number of grid lines between subgrid lines) for the subgrid
\code{drange}, the range of snapping distances overall (in same units as \code{g})
\code{vec}, integer vector, the mapping from \code{pts} to \code{g} in vectorized order
\code{g}, list of integer vectors, dimension-wise coordinates of the grid lines
\code{map}, list of integer vectors, dimension-wise mapping from \code{pts} to \code{g}
\code{dist}, list of numeric vectors, dimension-wise snapping distances
\code{sg}, list with information about the subgrid:
\code{gdim}, the subgrid dimensions (ny, nx)
\code{g}, the subgrid lines (a subset of \code{g} in parent list)
\code{map}, dimension-wise mapping from \code{pts} to \code{sg$g}
\code{vec}, mapping from \code{pts} to \code{sg$g} in vectorized order
}
\examples{
# define a grid of coordinates and add jitter to a subgrid
gdim = c(y=100, x=100)
nsep = c(y=5, x=8)
g = Map(\(p, s) seq(1, p, by=s), p=gdim, s=nsep)
ng = prod(sapply(g, length))
pts = expand.grid(g) + stats::rnorm(2*ng)

# plot grid and the point set generated from it
pkern_snap_plot(list(g=g), pts)

# snap to grid lines, allowing duplicates
snap = pkern_snap(g, pts, distinct=FALSE)
pkern_snap_plot(snap, pts)

# snap to grid lines, eliminate duplicates
snap.distinct = pkern_snap(g, pts)
pkern_snap_plot(snap.distinct, pts)

# another example with and more jitter and too many points
pts = expand.grid(g) + stats::rnorm(2*ng, sd=3)
pts = pts[sample(ng, 50),]
pkern_snap_plot(g, pts)
snap = pkern_snap(g, pts, sep=3, distinct=FALSE)
pkern_snap_plot(snap, pts)

# uncomment this line to demonstrate error handling
#snap.distinct = pkern_snap(g, pts, sep=3)

# call again with smaller sep
snap.distinct = pkern_snap(g, pts, sep=c(2,1))
pkern_snap_plot(snap.distinct, pts)

# call again with sep determined automatically
snap.distinct = pkern_snap(g, pts)
pkern_snap_plot(snap.distinct, pts)

# `bias` tunes how many grid lines are assigned
snap.distinct = pkern_snap(g, pts, bias=1)
pkern_snap_plot(snap.distinct, pts)

}
