% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkern_model.R
\name{pkern_nLL}
\alias{pkern_nLL}
\title{Negative log-likelihood for parameter vector \code{p}}
\usage{
pkern_nLL(
  p,
  g_obs,
  pars_fix,
  X = 0,
  iso = FALSE,
  quiet = TRUE,
  log_scale = FALSE
)
}
\arguments{
\item{p}{numeric vector of covariance parameters accepted by \code{pkern_pars_update}}

\item{g_obs}{list of form returned by \code{pkern_grid} (with entries 'gdim', 'gres', 'gval')}

\item{pars_fix}{list of form returned by \code{pkern_pars} (with entries 'y', 'x', 'eps', 'psill')}

\item{X}{numeric, vector, matrix, or NA, the mean or its linear predictors, passed to \code{pkern_LL}}

\item{iso}{logical, indicates to use identical kernels for x and y (\code{pars$x} is ignored)}

\item{quiet}{logical indicating to suppress console output}
}
\value{
numeric, the negative log-likelihood of \code{p} given \code{g_obs}
}
\description{
Returns the negative log-likelihood of parameter vector \code{p} for the covariance
model \code{pars_fix}, given data grid \code{g_obs}.
}
\details{
This is a wrapper for \code{-pkern_LL()} allowing parameters to be passed as a numeric
vector instead of a list (for use in optimization etc). Parameters in \code{p} are copied
to \code{pars_fix} and passed to the likelihood computer.

\code{p} is the vector of covariance parameters to test. Names in \code{p} are ignored; Its length
and order should correspond with the pattern of NAs in \code{pars_fix}. Users should check that
the desired parameter list is being constructed correctly by testing with:
\code{pkern_pars_update(pars_fix, p, iso=iso, na_omit=TRUE)}.
}
\examples{
# set up example grid and data
g_obs = pkern_grid(10)
g_obs$gval = rnorm(10^2)

# get some default parameters and vectorize them
pars = pkern_pars(g_obs, 'gau')
p = pkern_pars_update(pars)
pkern_nLL(p, g_obs, pars)

# change a parameter and re-evaluate
p_compare = p
p_compare[1] = 2*p_compare[1]
pkern_nLL(p_compare, g_obs, pars)

# repeat by calling pkern_LL directly
pars_compare = pars
pars_compare$eps = 2*pars_compare$eps
-pkern_LL(pars_compare, g_obs)

# set up a subset of parameters for fitting
pars_fix = pars
pars_fix$eps = NA
pars_fix$y$kp = NA

# names in p_fit are for illustration only (only the order matters)
p_fit = c(eps=1, y.rho=1)
pkern_nLL(p_fit, g_obs, pars_fix)

# equivalently:
pars_fit = pars
pars_fit$eps = p_fit[1]
pars_fit$y$kp = p_fit[2]
-pkern_LL(pars_fit, g_obs)

# check an input specification
pkern_pars_update(pars_fix, p_fit, na_omit=TRUE)
pars_fit


}
