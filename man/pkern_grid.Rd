% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkern_grid.R
\name{pkern_grid}
\alias{pkern_grid}
\title{Make a pkern grid list object}
\usage{
pkern_grid(g, vals = TRUE)
}
\arguments{
\item{g}{grid object such as a matrix or raster or vector of grid dimensions (see details)}

\item{vals}{logical indicating to include the data vector 'gval' in return list}
}
\value{
named list containing 'gyx', 'gres', 'gdim', and optionally 'gval' and 'crs'
}
\description{
Define a 2-dimensional spatial grid as a list of vectors.
}
\details{
This function accepts (in its first argument) 'RasterLayer' and 'RasterStack' objects from
the \code{raster} package, 'SpatRaster' objects from \code{terra}, as well as any non-complex matrix,
or a list containing the vectorization of one, or a vector of grid dimensions.

It returns a list with the following 3-5 elements:
\itemize{
\item gyx: \code{list(y, x)}, the coordinates of the y and x grid lines in vectors \code{y} and \code{x}
\item gres: \code{c(y, x)}, the (numeric) y and x distances between grid lines
\item gdim: \code{c(y, x)}, the (integer) number of y and x grid lines
\item gval: vector, the data (if any) in column-major order with y descending, x ascending
\item crs: character, the WKT string (if available) describing coordinate reference system
}

where 'crs' is included only for geo-referenced inputs from \code{raster} and \code{terra}.

The input \code{g} can itself be a list containing a subset of these elements (including at least
one of 'gdim' or 'gyx'), and the function will fill in missing entries with their defaults:
If 'gval' is missing, the function sets NAs in the data vector; If 'res' is missing, it is
computed from the first two grid lines in 'gyx'. If 'gyx' is missing, it is assigned the sequence
\code{1:n} (scaled by 'res', if available) for each \code{n} in 'gdim'; and if 'gdim' is missing, it
is set to equal the number of grid lines specified in (each vector of) 'gyx'.

\code{g} can also be a vector of the form \code{c(y, x)} defining grid dimensions (as a shorthand for
the call \code{pkern_grid(g=list(gdim=gdim))}). Note that 1-dimensional grids are not supported,
ie. there must be at least 2 grid lines in both the x and y dimensions.
}
\examples{

# simple grid construction from dimensions
gdim = c(12, 10)
g = pkern_grid(gdim)
str(g)
str(pkern_grid(gdim, vals=FALSE))

# supply grid lines instead to get the same result
identical(g, pkern_grid(g=list(gyx=lapply(gdim, seq))) )

# display coordinates and grid line indices
pkern_plot(g)
pkern_plot(g, ij=TRUE)

# set a different resolution and notice the argument is ignored if conflicting gyx supplied
gres_new = c(3, 4)
pkern_plot(pkern_grid(g=list(gyx=lapply(gdim, seq), gres=gres_new)))
pkern_plot(pkern_grid(g=list(gdim=gdim, gres=gres_new)))

# shorthand for square grids
identical(pkern_grid(g=2), pkern_grid(g=c(2,2)))

# example with data
gdim = c(25, 25)
yx = as.list(expand.grid(lapply(gdim, seq)))
eg_vec = as.numeric( yx[[2]] \%\% yx[[1]] )
eg_mat = matrix(eg_vec, gdim)
g = pkern_grid(eg_mat)
pkern_plot(g, ij=T, zlab='j mod i')

# y is in descending order
pkern_plot(g, xlab='x = j', ylab='y = 26 - i', zlab='j mod i')

# data vectors should be in R's default matrix vectorization order
all.equal(eg_vec, as.vector(eg_mat))
all.equal(g, pkern_grid(list(gdim=gdim, gval=as.vector(eg_mat))))

if( requireNamespace('raster') ) {

# open example file as RasterLayer
r_path = system.file('external/rlogo.grd', package='raster')
r = raster::raster(r_path, band=1)

# convert to pkern list
g = pkern_grid(r)
pkern_plot(g)
pkern_plot(g, ij=T)

# open a RasterStack and notice only first band loaded
r_multi = raster::stack(r_path)
str(pkern_grid(r_multi))
str(g)

# same with terra
if( requireNamespace('terra') ) {

g = pkern_grid(terra::rast(r_path))
str(g)
pkern_plot(g, ij=T)

}
}
}
