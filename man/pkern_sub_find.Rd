% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pkern_index.R
\name{pkern_sub_find}
\alias{pkern_sub_find}
\title{Check vectorized grid data for non-NA points that form a complete sub-grid}
\usage{
pkern_sub_find(g_obs, gdim = NULL)
}
\arguments{
\item{g_obs}{logical vector, or any other object accepted by \code{pkern_grid}}

\item{gdim}{integer vector, the grid dimensions (ny, nx)}

\item{g_out}{logical, indicates to return a grid list object}
}
\value{
NULL or list of information about the location and spacing of the sub-grid
within \code{g} (see details)
}
\description{
If a gridded data-set \code{g_obs} has missing values (NAs), but the set of non-NA points
form a complete sub-grid, this function finds its grid lines, resolution scaling factor,
and dimensions. If no eligible sub-grids are found, the function returns NULL.
}
\details{
A sub-grid is only eligible if it contains all of the non-NA points in \code{g_obs} and none
of the NAs; eg if a single point missing from the sub-grid, or a single non-NA point lies
outside the sub-grid, the function will fail to detect the sub-grid and return NULL. If no
points are NA, the function returns indices for the full grid.

In the special case that \code{g_obs} is a logical vector, it is interpreted as indicating
the non-NA locations in a grid (and isn't itself checked for NAs). the argument \code{gdim}
must be supplied in this case. When grid dimensions can otherwise be derived from
\code{g_obs}, the function does so and overrides any argument to \code{gdim}.
}
\examples{

# define a grid and example data
gdim = c(50, 53)
g = pkern_grid(gdim)
gval = pkern_sim(g, modifyList(pkern_pars(g), list(eps=0)), quiet=TRUE)
g_obs = modifyList(g, list(gval=gval))
pkern_plot(g_obs)

# define a supergrid containing the original data and make sure we can find it
g_obs_big = pkern_rescale(g_obs, down=3)
str(pkern_sub_find(g_obs_big))

# define a smaller sub-grid at random
spacing = sapply(floor(gdim/10), function(x) 1 + sample.int(x, 1))
gdim_sg = sapply(floor( (gdim - 1) / spacing), function(x) sample.int(x, 1))
ij_first = sapply(gdim - ( spacing * gdim_sg ), function(x) sample.int(x, 1))

# find index of sub-grid lines and vectorized index of points
ij_sg = Map(\(idx, r, n) seq(idx, by=r, length.out=n), idx=ij_first, r=spacing, n=gdim_sg)
is_sg = pkern_sub_idx(gdim, ij_sg, idx=FALSE)

# sub grids with side length 1 have no spacing defined along that dimension
spacing[gdim_sg==1] = NA

# assign values to the sub-grid points
g = pkern_grid(gdim)
g$gval[is_sg] = TRUE
pkern_plot(g, zlab='sub-grid')

# call the function on g and check for expected results
subgrid_result = pkern_sub_find(g)
all.equal(unname(subgrid_result$gdim), gdim_sg)
all.equal(unname(subgrid_result$ij), ij_sg)
all.equal(unname(subgrid_result$res_scale), spacing)

# or call on the vector and supply gdim separately
identical(subgrid_result, pkern_sub_find(g$gval, g_obs$gdim))
identical(subgrid_result, pkern_sub_find(!is.na(g$gval), g$gdim))

}
